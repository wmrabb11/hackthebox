{
  "swagger": "2.0",
  "basePath": "/api",
  "paths": {
    "/auth/check": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Checks validity of an authorization token",
        "operationId": "get_auth_collection",
        "tags": [
          "auth/"
        ]
      }
    },
    "/auth/login": {
      "get": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Create an authentication token provided valid username and password",
        "operationId": "get_auth_collection",
        "tags": [
          "auth/"
        ]
      }
    },
    "/brew/": {
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/A page of brews"
            }
          }
        },
        "summary": "Returns list of brews",
        "operationId": "get_brew_collection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number",
            "default": 1
          },
          {
            "name": "bool",
            "in": "query",
            "type": "boolean",
            "description": "Page number",
            "default": 1
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Results per page {error_msg}",
            "default": 10,
            "enum": [
              2,
              10,
              20,
              30,
              40,
              50
            ],
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "brew/"
        ]
      },
      "post": {
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "summary": "Creates a new brew entry",
        "operationId": "post_brew_collection",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/A craft brew"
            }
          }
        ],
        "tags": [
          "brew/"
        ]
      }
    },
    "/brew/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "integer"
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "Brew successfully deleted."
          },
          "404": {
            "description": "Brew not found."
          }
        },
        "summary": "Deletes a brew",
        "operationId": "delete_brew_item",
        "tags": [
          "brew/"
        ]
      },
      "get": {
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/A craft brew"
            }
          },
          "404": {
            "description": "Brew not found."
          }
        },
        "summary": "Returns brew data",
        "operationId": "get_brew_item",
        "tags": [
          "brew/"
        ]
      },
      "put": {
        "responses": {
          "204": {
            "description": "Brew successfully updated."
          },
          "404": {
            "description": "Brew not found."
          }
        },
        "summary": "Updates a brew",
        "operationId": "put_brew_item",
        "parameters": [
          {
            "name": "payload",
            "required": true,
            "in": "body",
            "schema": {
              "$ref": "#/definitions/A craft brew"
            }
          }
        ],
        "tags": [
          "brew/"
        ]
      }
    }
  },
  "info": {
    "title": "Craft API",
    "version": "1.0",
    "description": "An API for IPA's"
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "auth/",
      "description": "Operations related to authentication"
    },
    {
      "name": "brew/",
      "description": "Operations related to beer."
    }
  ],
  "definitions": {
    "A craft brew": {
      "required": [
        "abv",
        "brewer",
        "name",
        "style"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique identifier of the beverage"
        },
        "brewer": {
          "type": "string",
          "description": "Name of brewery"
        },
        "name": {
          "type": "string",
          "description": "Name of the brew"
        },
        "style": {
          "type": "string",
          "description": "Style of the brew"
        },
        "abv": {
          "type": "string",
          "description": "ABV of the brew"
        }
      },
      "type": "object"
    },
    "A page of brews": {
      "allOf": [
        {
          "$ref": "#/definitions/A page of results"
        },
        {
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/A craft brew"
              }
            }
          },
          "type": "object"
        }
      ]
    },
    "A page of results": {
      "properties": {
        "page": {
          "type": "integer",
          "description": "Number of this page of results"
        },
        "pages": {
          "type": "integer",
          "description": "Total number of pages of results"
        },
        "per_page": {
          "type": "integer",
          "description": "Number of items per page of results"
        },
        "total": {
          "type": "integer",
          "description": "Total number of results"
        }
      },
      "type": "object"
    }
  },
  "responses": {
    "ParseError": {
      "description": "When a mask can't be parsed"
    },
    "MaskError": {
      "description": "When any error occurs on mask"
    }
  },
  "host": "api.craft.htb"
}
